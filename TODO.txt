v0.2
- bugfix: LOW_DPI dependent VFRPoint transformations
- bugfix: HIGH_DPI dependent VFRPoint transformations
- memory optimizations for final image generation
- session management
  - limit the session connections based on available memory (or number of open sessions)
  - visual feedback if no connection available
  - caching of states per session to disk on each modification
  - session_id is always sent in http and ws requests (retreived from localStorage)
- extend map drawing with logging
- find memory optimization possibilities for map drawing (freeing memory earlier, etc.)
- bugfix: map-info width and horizontal scrolling
- bugfix: readonly mathedit does not show formula
- mapedit: moving amount is not decreasing when scaled
- edit "function_range" on leg page
- order constraint points by func_x automatically
- save to cloud
- annotations: more precise bubble estimation
- annotations: bubbles can be moved with mouse
- mobile friendly (responsive + touch controls)
- progress indication while waiting for server
+ landing page
+ memory optimizations for low-res map
  + separate data sending from image sending
  + instead of contextmanager, be explicit about figure release
  + instead of plotting the map, use Pillow based manipulation
  + send images as binary through socket (centralize receiving in frontend)
  + send smaller tiles through websocket (this will also be good for progress display)
+ bugfix: LOW_DPI dependent tiles coordinates
+ no contextmanagers for figures
+ session management: time to live for sessions in the session store (api/routes.py:_vfrroutes)
+ the same memory optimizations for waypoints map
+ bugfix: the last tiles (in a row, in a column) are stretched (of course: they are smaller, but this
  is not considered)
+ the same memory optimizations for legs map
+ the same memory optimizations for annotations map
+ the same memory optimizations for tracks map

v0.1:
+ transition to LEG definition step (waypoints to legs conversion, 
  considering existing legs)
+ stepping refactor
+ legs
  + transferring leg definitions to frontend
  + transferring leg function matrices to frontend
  + drawing leg overlays (with hardcoded linear function)
  + editing leg functions
  + converting leg functions to evaluateable on frontend
  + converting leg functions to evaluateable on backend
  + draw the functions correctly
  + editable constraint points and x-values
+ bugfix of step 1: point moving did not work
+ bugfix of mapedit: resize observer does not reset top left corner
+ mapedit: zoom to all
+ docgen_sample.py works again
+ annotations
  + basic implementation
  + bubbles are switchable
  + add/move annotations with mouse (changing func-x-value)
  + server state is updated
  + annotation can be deleted
  + annotation can be created
  + minimum of 2 annotations included
+ tracks
  + upload track files and import it in state
  + assign colors to them
  + draw the full image with annotations and routes
+ final step: download generated files (docx, png, gpx, vfr)
  + download docx, png
  + download gpx
  + vfr format save-load
  + change dof before generation
+ auto reconnect websocket (or change to socket.io)
+ deploy
  + Dockerfile + koyeb.yaml
  + websocket path adjusted to deployed one
  + high and low resolution set from environment variable (instead if hardcoded)
  + bugfix: fixed local paths eliminated
